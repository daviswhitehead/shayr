# Every time you run fastlane, use `bundle exec fastlane [lane]`
# On your CI, add `[sudo] bundle install` as your first build step
# To update fastlane, just run `[sudo] bundle update fastlane`

fastlane_version '2.96.1'
fastlane_require 'dotenv/load'


# before_all do
    # desc 'update codepush builds'
#   ensure_git_branch
#   ensure_git_status_clean
#   git_pull
# end

platform :ios do

  desc 'IOS - ensure bugsnag has most up to date symbols'
  lane :refresh_dsyms do
    # download_dsyms
    # upload_symbols_to_bugsnag(api_key: ENV['BUGSNAG_KEY'])
    # clean_build_artifacts
    sh("pwd")
    sh("cd .. && react-native bundle --platform ios --dev false --entry-file index.js --bundle-output ios-release.bundle --sourcemap-output ios-release.bundle.map")
    sh("cd .. && curl https://upload.bugsnag.com/react-native-source-map -F apiKey=#{ENV['BUGSNAG_KEY']}  -F appVersion=#{ENV['IOS_APP_VERSION']} -F dev=false -F platform=ios -F sourceMap=@ios-release.bundle.map -F bundle=@ios-release.bundle -F projectRoot=`pwd`")
  end

  desc 'release certificates and provisioning profiles'
  lane :release_certificates do
    match(
      type: 'appstore',
      app_identifier: [
          ENV['APP_BUNDLE_ID_IOS'],
          ENV['APP_EXTENSION_BUNDLE_ID_IOS']
        ],
        readonly: true
      )
  end

  desc 'development certificates and provisioning profiles'
  lane :development_certificates do
    register_devices(
      devices_file: './devices.txt',
      username: 'whitehead.davis@gmail.com'
    )
    match(
      type: 'development',
      app_identifier: [
          ENV['APP_BUNDLE_ID_IOS'],
          ENV['APP_EXTENSION_BUNDLE_ID_IOS']
        ],
        readonly: false,
        force_for_new_devices: true
      )
  end

  desc 'build ios application'
  private_lane :build do |options|
    increment_build_number(
      xcodeproj: './ios/shayr.xcodeproj'
    )
    gym(
      scheme: ENV['SCHEME'],
      workspace: './ios/shayr.xcworkspace',
      export_method: options[:method]
    )
  end
  
  desc 'update bundle ids per environment'
  lane :update_bundle_ids do
    update_app_identifier(
      xcodeproj: './ios/shayr.xcodeproj',
      plist_path: 'shayr/Info.plist', 
      app_identifier: ENV['APP_BUNDLE_ID_IOS']
    )
    update_app_identifier(
      xcodeproj: './ios/shayr.xcodeproj',
      plist_path: 'ShareExtension/Info.plist', 
      app_identifier: ENV['APP_EXTENSION_BUNDLE_ID_IOS']
    )
  end

  desc 'update codepush builds'
  lane :update_codepush_builds do
    sh("pwd")
    sh("cd .. && appcenter codepush release-react -a whitehead.davis/Shayr-iOS -d " + ENV['ENV_NAME'])
  end

  desc 'ship a beta'
  lane :beta do
    development_certificates
    update_bundle_ids
    build(method: 'development')
    crashlytics(
      api_token: ENV['FABRIC_API_KEY'],
      build_secret: ENV['FABRIC_BUILD_SECRET']
    )
    update_codepush_builds
    
    # bugsnag ios
    refresh_dsyms
    # send_build_to_bugsnag(api_key: ENV['BUGSNAG_KEY'])

    # commit_version_bump(
    #   message: 'bump build',
    #   xcodeproj: './ios/shayr.xcodeproj'
    # )
    # push_to_git_remote
  end


  desc 'ship a release'
  lane :prod do
    release_certificates
    update_bundle_ids
    # get_push_certificate
    # capture_screenshots
    build(method: 'app-store')
    crashlytics(
      api_token: ENV['FABRIC_API_KEY'],
      build_secret: ENV['FABRIC_BUILD_SECRET']
    )
    upload_to_app_store(force: true)
    
    # bugsnag ios
    refresh_dsyms
    # send_build_to_bugsnag(api_key: ENV['BUGSNAG_KEY'])
    
    # commit_version_bump(
      #   message: 'bump build',
      #   xcodeproj: './ios/shayr.xcodeproj'
      # )
      # push_to_git_remote

      update_codepush_builds
  end
end

platform :android do

  desc 'ANDROID - ensure bugsnag has most up to date symbols'
  lane :refresh_dsyms do
    sh("pwd")
    sh("cd .. && react-native bundle --platform android --dev false --entry-file index.js --bundle-output android-release.bundle --sourcemap-output android-release.bundle.map")
    sh("cd .. && curl https://upload.bugsnag.com/react-native-source-map -F apiKey=#{ENV['BUGSNAG_KEY']}  -F appVersion=#{ENV['ANDROID_APP_VERSION']} -F dev=false -F platform=android -F sourceMap=@android-release.bundle.map -F bundle=@android-release.bundle -F projectRoot=`pwd`")
  end

  desc 'update codepush builds'
  lane :update_codepush_builds do
    sh("pwd")
    sh("cd .. && appcenter codepush release-react -a whitehead.davis/Shayr-Android -d " + ENV['ENV_NAME'])
  end

  desc 'ship a beta'
  lane :beta do
    gradle(
      task: 'clean',
      project_dir: 'android/'
    )

    increment_version_code(
        gradle_file_path: "./android/app/build.gradle",
        #ext_constant_name: "test"
        #app_folder_name:"app"
    )

    gradle(
      task: 'assemble',
      build_type: 'Release',
      project_dir: 'android',
      system_properties: {
        "ENVFILE": ENV['ENVFILE_LOCATION']
      }
    )

    # supply(track: "alpha", apk: "android/app/build/outputs/apk/app-release.apk")
    crashlytics(
      api_token: ENV['FABRIC_API_KEY'],
      build_secret: ENV['FABRIC_BUILD_SECRET']
    )

    upload_to_play_store(
      track: 'alpha',
      package_name: ENV['APP_ID_ANDROID'] + ENV['APP_ID_SUFFIX_ANDROID']
    )
    
    # bugsnag android
    refresh_dsyms
    # upload_symbols_to_bugsnag(api_key: ENV['BUGSNAG_KEY'])
    # send_build_to_bugsnag(api_key: ENV['BUGSNAG_KEY'])

    update_codepush_builds

  end
end
